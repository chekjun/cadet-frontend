// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Test GitHubOverlay renders correctly 1`] = `
"<GitHubOverlay userRepos={{...}} pickerType=\\"Open\\" isPickerOpen={true} handleEditorValueChange={[Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: { calls: [], instances: [], invocationCallOrder: [], results: [] }, mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }} handleGitHubCloseFileExplorerDialog={[Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: { calls: [], instances: [], invocationCallOrder: [], results: [] }, mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }} handleGitHubBeginConfirmationDialog={[Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: { calls: [], instances: [], invocationCallOrder: [], results: [] }, mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }}>
  <div>
    <Blueprint3.MultistepDialog finalButtonProps={{...}} isOpen={true} onClose={[Function: bound handleClose]} title=\\"Open file\\" usePortal={false} canOutsideClickClose={true}>
      <Blueprint3.Dialog finalButtonProps={{...}} isOpen={true} onClose={[Function: bound handleClose]} title=\\"Open file\\" usePortal={false} canOutsideClickClose={true} style={{...}}>
        <Blueprint3.Overlay finalButtonProps={{...}} isOpen={true} onClose={[Function: bound handleClose]} title=\\"Open file\\" usePortal={false} canOutsideClickClose={true} style={{...}} className=\\"bp3-overlay-scroll-container\\" hasBackdrop={true} autoFocus={true} backdropProps={{...}} canEscapeKeyClose={true} enforceFocus={true} lazy={true} transitionDuration={300} transitionName=\\"bp3-overlay\\">
          <TransitionGroup appear={true} className=\\"bp3-overlay bp3-overlay-open bp3-overlay-inline bp3-overlay-scroll-container\\" component=\\"div\\" onKeyDown={[Function (anonymous)]} childFactory={[Function: childFactory]}>
            <div className=\\"bp3-overlay bp3-overlay-open bp3-overlay-inline bp3-overlay-scroll-container\\" onKeyDown={[Function (anonymous)]}>
              <CSSTransition classNames=\\"bp3-overlay\\" timeout={300} addEndListener={[Function (anonymous)]} onExited={[Function: bound bound handleExited]} in={true} appear={true} enter={[undefined]} exit={[undefined]}>
                <Transition timeout={300} addEndListener={[Function (anonymous)]} onExited={[Function (anonymous)]} in={true} appear={true} enter={true} exit={true} onEnter={[Function (anonymous)]} onEntered={[Function (anonymous)]} onEntering={[Function (anonymous)]} onExit={[Function (anonymous)]} onExiting={[Function (anonymous)]} mountOnEnter={false} unmountOnExit={false}>
                  <div className=\\"bp3-overlay-backdrop\\" onMouseDown={[Function (anonymous)]} tabIndex={0} />
                </Transition>
              </CSSTransition>
              <CSSTransition classNames=\\"bp3-overlay\\" onEntering={[undefined]} onEntered={[undefined]} onExiting={[undefined]} onExited={[Function: bound bound handleExited]} timeout={300} addEndListener={[Function (anonymous)]} in={true} appear={true} enter={[undefined]} exit={[undefined]}>
                <Transition onEntering={[Function (anonymous)]} onEntered={[Function (anonymous)]} onExiting={[Function (anonymous)]} onExited={[Function (anonymous)]} timeout={300} addEndListener={[Function (anonymous)]} in={true} appear={true} enter={true} exit={true} onEnter={[Function (anonymous)]} onExit={[Function (anonymous)]} mountOnEnter={false} unmountOnExit={false}>
                  <div className=\\"bp3-dialog-container bp3-overlay-content\\" tabIndex={0}>
                    <div className=\\"bp3-dialog\\" style={{...}}>
                      <div className=\\"bp3-dialog-header\\">
                        <Blueprint3.Icon icon={[undefined]} iconSize={20} />
                        <Component>
                          <h4 className=\\"bp3-heading\\">
                            Open file
                          </h4>
                        </Component>
                        <Blueprint3.Button aria-label=\\"Close\\" className=\\"bp3-dialog-close-button\\" icon={{...}} minimal={true} onClick={[Function: bound handleClose]}>
                          <button type=\\"button\\" aria-label=\\"Close\\" className=\\"bp3-button bp3-minimal bp3-dialog-close-button\\" onClick={[Function: bound handleClose]} disabled={[undefined]} onBlur={[Function (anonymous)]} onKeyDown={[Function (anonymous)]} onKeyUp={[Function (anonymous)]} tabIndex={[undefined]}>
                            <Blueprint3.Icon icon={{...}}>
                              <Blueprint3.Icon icon=\\"small-cross\\" iconSize={20}>
                                <span icon=\\"small-cross\\" className=\\"bp3-icon bp3-icon-small-cross\\" title={[undefined]}>
                                  <svg fill={[undefined]} data-icon=\\"small-cross\\" width={20} height={20} viewBox=\\"0 0 20 20\\">
                                    <desc>
                                      small-cross
                                    </desc>
                                    <path d=\\"M11.41 10l3.29-3.29c.19-.18.3-.43.3-.71a1.003 1.003 0 00-1.71-.71L10 8.59l-3.29-3.3a1.003 1.003 0 00-1.42 1.42L8.59 10 5.3 13.29c-.19.18-.3.43-.3.71a1.003 1.003 0 001.71.71l3.29-3.3 3.29 3.29c.18.19.43.3.71.3a1.003 1.003 0 00.71-1.71L11.41 10z\\" fillRule=\\"evenodd\\" />
                                  </svg>
                                </span>
                              </Blueprint3.Icon>
                            </Blueprint3.Icon>
                            <Blueprint3.Icon icon={[undefined]} />
                          </button>
                        </Blueprint3.Button>
                      </div>
                      <div className=\\"bp3-multistep-dialog-panels\\">
                        <div className=\\"bp3-multistep-dialog-left-panel\\">
                          <div className=\\"bp3-dialog-step-container bp3-active\\">
                            <div className=\\"bp3-dialog-step\\" onClick={[Function (anonymous)]}>
                              <div className=\\"bp3-dialog-step-icon\\">
                                1
                              </div>
                              <div className=\\"bp3-dialog-step-title bp3-active\\">
                                Select Repository
                              </div>
                            </div>
                          </div>
                          <div className=\\"bp3-dialog-step-container\\">
                            <div className=\\"bp3-dialog-step\\" onClick={[undefined]}>
                              <div className=\\"bp3-dialog-step-icon\\">
                                2
                              </div>
                              <div className=\\"bp3-dialog-step-title\\">
                                Select File
                              </div>
                            </div>
                          </div>
                        </div>
                        <div className=\\"bp3-multistep-dialog-right-panel\\">
                          <RepositoryExplorerPanel userRepos={{...}} repoName=\\"\\" setRepoName={[Function: bound setRepoName]} refreshRepoFiles={[Function: bound refreshRepoFiles]} pickerType=\\"Open\\" isPickerOpen={true} handleEditorValueChange={[Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: { calls: [], instances: [], invocationCallOrder: [], results: [] }, mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }} handleGitHubCloseFileExplorerDialog={[Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: { calls: [], instances: [], invocationCallOrder: [], results: [] }, mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }} handleGitHubBeginConfirmationDialog={[Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: { calls: [], instances: [], invocationCallOrder: [], results: [] }, mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }}>
                            <div className=\\"bp3-dialog-body\\">
                              <Blueprint3.RadioGroup className=\\"RepoPanel\\" onChange={[Function: bound setRepoName]} selectedValue=\\"\\">
                                <div className=\\"RepoPanel\\">
                                  <Blueprint3.Radio label=\\"repoName1\\" value=\\"repoName1\\" checked={false} className={[undefined]} disabled={[undefined]} inline={[undefined]} name=\\"Blueprint3.RadioGroup-1\\" onChange={[Function: bound setRepoName]}>
                                    <Control label=\\"repoName1\\" value=\\"repoName1\\" checked={false} className={[undefined]} disabled={[undefined]} inline={[undefined]} name=\\"Blueprint3.RadioGroup-1\\" onChange={[Function: bound setRepoName]} type=\\"radio\\" typeClassName=\\"bp3-radio\\">
                                      <label className=\\"bp3-control bp3-radio\\" style={[undefined]}>
                                        <input value=\\"repoName1\\" checked={false} disabled={[undefined]} name=\\"Blueprint3.RadioGroup-1\\" onChange={[Function: bound setRepoName]} type=\\"radio\\" />
                                        <span className=\\"bp3-control-indicator\\" />
                                        repoName1
                                      </label>
                                    </Control>
                                  </Blueprint3.Radio>
                                  <Blueprint3.Radio label=\\"repoName2\\" value=\\"repoName2\\" checked={false} className={[undefined]} disabled={[undefined]} inline={[undefined]} name=\\"Blueprint3.RadioGroup-1\\" onChange={[Function: bound setRepoName]}>
                                    <Control label=\\"repoName2\\" value=\\"repoName2\\" checked={false} className={[undefined]} disabled={[undefined]} inline={[undefined]} name=\\"Blueprint3.RadioGroup-1\\" onChange={[Function: bound setRepoName]} type=\\"radio\\" typeClassName=\\"bp3-radio\\">
                                      <label className=\\"bp3-control bp3-radio\\" style={[undefined]}>
                                        <input value=\\"repoName2\\" checked={false} disabled={[undefined]} name=\\"Blueprint3.RadioGroup-1\\" onChange={[Function: bound setRepoName]} type=\\"radio\\" />
                                        <span className=\\"bp3-control-indicator\\" />
                                        repoName2
                                      </label>
                                    </Control>
                                  </Blueprint3.Radio>
                                  <Blueprint3.Radio label=\\"repoName3\\" value=\\"repoName3\\" checked={false} className={[undefined]} disabled={[undefined]} inline={[undefined]} name=\\"Blueprint3.RadioGroup-1\\" onChange={[Function: bound setRepoName]}>
                                    <Control label=\\"repoName3\\" value=\\"repoName3\\" checked={false} className={[undefined]} disabled={[undefined]} inline={[undefined]} name=\\"Blueprint3.RadioGroup-1\\" onChange={[Function: bound setRepoName]} type=\\"radio\\" typeClassName=\\"bp3-radio\\">
                                      <label className=\\"bp3-control bp3-radio\\" style={[undefined]}>
                                        <input value=\\"repoName3\\" checked={false} disabled={[undefined]} name=\\"Blueprint3.RadioGroup-1\\" onChange={[Function: bound setRepoName]} type=\\"radio\\" />
                                        <span className=\\"bp3-control-indicator\\" />
                                        repoName3
                                      </label>
                                    </Control>
                                  </Blueprint3.Radio>
                                </div>
                              </Blueprint3.RadioGroup>
                            </div>
                          </RepositoryExplorerPanel>
                          <div className=\\"bp3-multistep-dialog-footer\\">
                            <div className=\\"bp3-dialog-footer-actions\\">
                              <Blueprint3.Button intent=\\"primary\\" onClick={[Function (anonymous)]} text=\\"Next\\">
                                <button type=\\"button\\" onClick={[Function (anonymous)]} className=\\"bp3-button bp3-intent-primary\\" disabled={[undefined]} onBlur={[Function (anonymous)]} onKeyDown={[Function (anonymous)]} onKeyUp={[Function (anonymous)]} tabIndex={[undefined]}>
                                  <Blueprint3.Icon icon={[undefined]} />
                                  <span className=\\"bp3-button-text\\">
                                    Next
                                  </span>
                                  <Blueprint3.Icon icon={[undefined]} />
                                </button>
                              </Blueprint3.Button>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </Transition>
              </CSSTransition>
            </div>
          </TransitionGroup>
        </Blueprint3.Overlay>
      </Blueprint3.Dialog>
    </Blueprint3.MultistepDialog>
  </div>
</GitHubOverlay>"
`;
